/* Copyright (c) 2018 Skyward Experimental Rocketry
 * Authors: Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

#include "Events.h"
#include "Topics.h"

namespace HomeoneBoard
{

string getTopicString(uint8_t topic)
{
    static const map<uint8_t, string> topic_string_map{
        {TOPIC_ADA, "TOPIC_ADA"},
        {TOPIC_DEPLOYMENT, "TOPIC_DEPLOYMENT"},
        {TOPIC_FLIGHT_EVENTS, "TOPIC_FLIGHT_EVENTS"},
        {TOPIC_FMM, "TOPIC_FMM"},
        {TOPIC_IGNITION, "TOPIC_IGNITION"},
        {TOPIC_TC, "TOPIC_TC"}};
    auto it = topic_string_map.find(topic);
    return it == topic_string_map.end() ? "TOPIC_UNKNOWN" : it->second;
}

/**
 * @brief Returns the name of the provided event
 *
 * @param event
 * @return string
 */
string getEventString(uint8_t event)
{
    static const map<uint8_t, string> event_string_map{
        {EV_ABORT_LAUNCH_TC, "EV_ABORT_LAUNCH_TC"},
        {EV_ADA_APOGEE_DETECTED, "EV_ADA_APOGEE_DETECTED"},
        {EV_ADA_DPL_ALT_DETECTED, "EV_ADA_DPL_ALT_DETECTED"},
        {EV_APOGEE, "EV_APOGEE"},
        {EV_ARM_TC, "EV_ARM_TC"},
        {EV_ARMED, "EV_ARMED"},
        {EV_BARO_CALIBRATION_TC, "EV_BARO_CALIBRATION_TC"},
        {EV_BOARD_RESET_TC, "EV_BOARD_RESET_TC"},
        {EV_CUT_ALL_TC, "EV_CUT_ALL_TC"},
        {EV_CUT_FIRST_DROGUE_TC, "EV_CUT_FIRST_DROGUE_TC"},
        {EV_DISARM_TC, "EV_DISARM_TC"},
        {EV_DPL_ALTITUDE, "EV_DPL_ALTITUDE"},
        {EV_END_MISSION_TC, "EV_END_MISSION_TC"},
        {EV_GS_OFFLINE, "EV_GS_OFFLINE"},
        {EV_IGN_ABORTED, "EV_IGN_ABORTED"},
        {EV_IGN_GETSTATUS, "EV_IGN_GETSTATUS"},
        {EV_IGN_OFFLINE, "EV_IGN_OFFLINE"},
        {EV_INIT_ERROR, "EV_INIT_ERROR"},
        {EV_INIT_OK, "EV_INIT_OK"},
        {EV_LANDED, "EV_LANDED"},
        {EV_LAUNCH, "EV_LAUNCH"},
        {EV_LAUNCH_TC, "EV_LAUNCH_TC"},
        {EV_LIFTOFF, "EV_LIFTOFF"},
        {EV_MANUAL_MODE_TC, "EV_MANUAL_MODE_TC"},
        {EV_NC_CLOSE_TC, "EV_NC_CLOSE_TC"},
        {EV_NC_DETACHED, "EV_NC_DETACHED"},
        {EV_NC_GETSTATUS, "EV_NC_GETSTATUS"},
        {EV_NC_OFFLINE, "EV_NC_OFFLINE"},
        {EV_NC_OPEN_TC, "EV_NC_OPEN_TC"},
        {EV_NEW_CAN_MSG, "EV_NEW_CAN_MSG"},
        {EV_SEND_HR_TM, "EV_SEND_HR_TM"},
        {EV_SEND_LR_TM, "EV_SEND_LR_TM"},
        {EV_START_LOGGING_TC, "EV_START_LOGGING_TC"},
        {EV_STOP_LOGGING_TC, "EV_STOP_LOGGING_TC"},
        {EV_TEST_MODE_TC, "EV_TEST_MODE_TC"},
        {EV_TIMEOUT_APOGEE, "EV_TIMEOUT_APOGEE"},
        {EV_TIMEOUT_ARM, "EV_TIMEOUT_ARM"},
        {EV_TIMEOUT_CUTTING, "EV_TIMEOUT_CUTTING"},
        {EV_TIMEOUT_DPL_ALT, "EV_TIMEOUT_DPL_ALT"},
        {EV_TIMEOUT_END_MISSION, "EV_TIMEOUT_END_MISSION"},
        {EV_TIMEOUT_SHADOW_MODE, "EV_TIMEOUT_SHADOW_MODE"},
        {EV_UMBILICAL_DETACHED, "EV_UMBILICAL_DETACHED"}};
    auto it = event_string_map.find(event);
    return it == event_string_map.end() ? "EV_EMPTY" : it->second;
}

}  // namespace HomeoneBoard