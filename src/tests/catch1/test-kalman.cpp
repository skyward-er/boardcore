/* Copyright (c) 2018 Skyward Experimental Rocketry
 * Authors: Luca Mozzarelli
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifdef STANDALONE_CATCH1_TEST
#include  "catch1-tests-entry.cpp"
#endif

#include  <catch.hpp>
#include <iostream>
#include "util/util.h"

#include "kalman/Kalman.h"
// static float input[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000375805877801643, 0.00226056586920299, 0.00690035635772364, 0.00863676216905024, 0.0106303753416240, 0.0154225451419468, 0.0284325863129288, 0.0697974850843419, 0.0836780905347462, 0.0990228355064945, 0.134102596624885, 0.221649898573533, 0.464883406871964, 0.796268514889786, 1.13097166627591, 1.97529038836138, 3.05279778136465, 4.36626813826386, 5.11275505745618, 5.50862406813072, 5.71220708236606, 5.91956824070467, 6.13071203350345, 6.56437993891227, 7.47745564563409, 9.48830878373739, 11.7474311770443, 13.9434124452112, 16.3303731085479, 18.9085067041769, 21.3928513763365, 24.0332298585877, 29.7854342088718, 35.5037245217711, 41.7393510477996, 48.4968581768771, 55.7806973586524, 63.5954723329732, 71.9460942720448, 80.8345766487493, 90.2625455173455, 99.2098156101228, 108.595259349952, 118.419321748753, 128.682704977976, 139.385317763969, 150.527414075490, 162.108518459522, 174.128087029623, 180.301880869704, 186.584787514489, 192.976586314492, 199.477228426521, 206.086378769924, 212.804053445311, 219.629879703007, 226.563670780437, 229.719060400678, 232.896260830613, 239.316031979299, 245.822865600256, 259.097311142115, 272.718807250220, 278.629294410496, 284.602802419885, 290.639278377024, 296.738744586288, 302.901151523188, 309.126476173339, 315.414681619023, 321.765733467686, 328.179586769857, 334.656195442063, 347.797449064536, 361.188958956281, 374.830051917606, 388.719918849932, 402.858030056230, 417.243184519696, 431.874567141532, 438.538714039338, 445.252400460132, 452.015542205583, 458.828058334244, 465.689877913598, 479.561109359697, 493.628736006061, 507.892329382897, 522.351545213984};
// static float state1[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00031184, 0.0012241, 0.0024513, 0.0040145, 0.006353, 0.01089, 0.022747, 0.036326, 0.05158, 0.07202, 0.10727, 0.18626, 0.32157, 0.50733, 0.83764, 1.3417, 2.0454, 2.8129, 3.5649, 4.2616, 4.9061, 5.5016, 6.0942, 6.7766, 7.7543, 9.0423, 10.5907, 12.4038, 14.4839, 16.7751, 19.2759, 22.5746, 26.5663, 31.2633, 36.674, 42.8031, 49.6526, 57.2218, 65.5077, 74.5046, 84.0007, 93.989, 104.4623, 115.4131, 126.834, 138.7176, 151.0567, 163.8441, 175.812, 187.0275, 197.5571, 207.4661, 216.8186, 225.677, 234.1015, 242.1502, 249.0983, 255.0677, 260.8208, 266.4086, 273.2199, 281.2016, 288.6816, 295.7282, 302.4055, 308.7731, 314.8867, 320.7974, 326.552, 332.1936, 337.7608, 343.2886, 350.1343, 358.2162, 367.4535, 377.767, 389.0796, 401.3165, 414.4057, 426.6282, 438.0622, 448.7828, 458.8618, 468.3677, 478.764, 489.9869, 501.9748, 514.6691, 528.0136};
static float input[] = {0, 0, 0, 0};
static float state1[] = { 0, 0, 0, 0};
TEST_CASE("Update test")
{
    float P_data[] = {0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1};
    float R_data[] = {10};
    float H_data[] = {1, 0, 0};
    float Q_data[] = {0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01};
    float Phi_data[] = {1, 0.2, 0.02, 0, 1, 0.2, 0, 0, 1};
    Matrix X0{3,1};
    Matrix P0{3,3, P_data};
    Matrix R{1,1, R_data};
    Matrix H{3,1, H_data};
    Matrix Q{3,3, Q_data};
    Kalman filter{P0, R, Q, H};
    Matrix y{1,1};
    for (int i = 0; i < 1; i++)
    {
        y.set(&input[i]);    
        filter.update(y);
        // REQUIRE( filter.X(0) == Approx(state1[i]) );
    }
}
