/* Copyright (c) {year} Skyward Experimental Rocketry
 * Authors: {authors}
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifdef STANDALONE_CATCH1_TEST
#include <catch/catch-tests-entry.cpp>
#endif

// We need access to the handleEvent(...) function in state machines in order to
// test them synchronously
#define protected public

#include <miosix.h>

#include <utils/TestUtils/catch.hpp>

#include "{state_machine_name}Controller/{state_machine_name}Controller.h"
#include <events/Events.h>
#include <utils/TestUtils/TestHelper.h>

using miosix::Thread;
using namespace DeathStackBoard;

class {state_machine_name}ControllerFixture
{{
public:
    // This is called at the beginning of each test / section
    {state_machine_name}ControllerFixture()
    {{
        controller = new {state_machine_name}Controller();
        EventBroker::getInstance().start();
        controller->start();
    }}

    // This is called at the end of each test / section
    ~{state_machine_name}ControllerFixture()
    {{
        controller->stop();
        EventBroker::getInstance().unsubscribe(controller);
        EventBroker::getInstance().clearDelayedEvents();
        delete controller;
    }}

protected:
    {state_machine_name}Controller* controller;
}};

{test_cases}
