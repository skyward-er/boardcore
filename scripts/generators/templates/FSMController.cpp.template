/* Copyright (c) {year} Skyward Experimental Rocketry
 * Authors: {authors}
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "{state_machine_name}Controller.h"

#include <miosix.h>

#include <configs/{state_machine_name}Config.h>
#include <events/EventBroker.h>
#include <events/Events.h>

namespace {main_namespace}
{{

using namespace {state_machine_name}Config;

{state_machine_name}Controller::{state_machine_name}Controller() : FSM(&{state_machine_name}Controller::state_{initial_state})
{{
    memset(&status, 0, sizeof({state_machine_name}ControllerStatus));
{topics_subscriptions}
}}

{state_machine_name}Controller::~{state_machine_name}Controller()
{{
    EventBroker::getInstance().unsubscribe(this);
}}

{states_functions_definitions}

{utility_functions_definiton}

/* --- LOGGER --- */

void {state_machine_name}Controller::logStatus({state_machine_name}ControllerState state)
{{
    status.state = state;
    logStatus();
}}

void {state_machine_name}Controller::logStatus()
{{
    status.timestamp = miosix::getTick();
    logger.log(status);
    StackLogger::getInstance().updateStack(THID);
}}

}}  // namespace {main_namespace}
