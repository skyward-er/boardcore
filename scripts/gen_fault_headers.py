#!/usr/bin/python

# Copyright (c) 2017 Skyward Experimental Rocketry
# Authors: Alain Carlucci
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


import csv,string,hashlib,datetime,sys

if len(sys.argv) != 3:
    print("Usage: %s <CSV File> <Output header file>" % (sys.argv[0]))
    exit(-1)

headerLine = None

newLines = []

lineCtr = 0
curCatId = 0
categories={}
enums={}

import hashlib

def fileHash(filename):
    h = hashlib.sha1()
    with open(filename, 'rb', buffering=0) as f:
        for b in iter(lambda : f.read(128*1024), b''):
            h.update(b)
    return h.hexdigest()

def genEnum(name, s, inc):
    a = ('''enum class %s
{
''') % (name,);
    cnt = 0
    for i in s:
        if inc:
            a += "    " + i + " = " + str(cnt) + ",\n"
        else:
            a += "    " + i + " = " + str(s[i]) + ",\n"
        cnt += 1
    a += "};\n"
    a += "const std::size_t %s_SIZE = %d;\n" %(name, cnt)
    return a

def genHeaderFile(fileName,csvFile):
    print("[*] Generating header file (%s)" %(fileName,))
    content = ('''/* Copyright (c) 2017 Skyward Experimental Rocketry
 * Authors: Alain Carlucci
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// CSV File:         %s
// SHA1 of CSV File: %s
// Autogen date:     %s

#include <cstdint>

#ifndef SKYWARD_FAULT_CTRL_LIST_H
#define SKYWARD_FAULT_CTRL_LIST_H

''') % (csvFile, fileHash(csvFile), datetime.datetime.now())
    content += genEnum("Fault", enums, True)
    content += "\nnamespace FaultCounterData\n{\n\n"
    content += genEnum("FaultCategory", categories, False)
    content += '''

// Usage: categoryID = FaultCounter::FaultToCategory[faultID];
const uint32_t FaultToCategory[] = 
{
    '''
    colCnt = 0
    for i in enums:
        content += "%d, " % (categories[enums[i]], )
        colCnt += 1
        if colCnt == 20:
            content += "\n    "
            colCnt = 0
    content += '''
}; /* CategoryMapping */

} /* FaultCounterData */

#endif /* SKYWARD_FAULT_CTRL_LIST_H */

'''
    try:
        with open(fileName, "w") as f:
            f.write(content)
        print("[+] Written %d lines in %s" % (len(content.split("\n")), fileName))
    except:
        print("[!] Cannot open %s for writing.", fileName)
        exit(-1)


def checkForGoodName(n):
    if len(n) == 0:
        return False

    if n[0] not in string.ascii_uppercase:
        return False

    for x in n:
        if x not in string.ascii_uppercase + string.digits + '_':
            return False

    if n[-1] not in string.ascii_uppercase + string.digits:
        return False

    return True

def genEnumName(cat,name):
    ctr = 2
    
    genBName = "F_" + cat + "_" + name
    genName = genBName

    while genName in enums:
        genName = genBName + "_" + str(ctr) 
        ctr += 1

    return genName

# return False: csv file is ok
# return True: csv file must be updated
def handleLine(r):
    global lineCtr,categories,newLines,enums,curCatId

    if len(r) != 4:
        print("[!] Parsing error at line %d. I'm expecting 4 fields" % (lineCtr,))
        exit(-1)

    curCat = r[0].strip().upper()
    curName = r[1].strip().upper()
    curDesc = r[2].strip()
    curEnum = r[3].strip().upper()

    if checkForGoodName(curCat) == False:
        print("[!] Invalid category at line %d." % (lineCtr,))
        exit(-1)

    if checkForGoodName(curName) == False:
        print("[!] Invalid name at line %d." % (lineCtr,))
        exit(-1)

    if len(curEnum) > 0 and (checkForGoodName(curEnum) == False or curEnum in enums):
        print("[!] Invalid generated name at line %d." % (lineCtr,))
        exit(-1)

    retVal = False
    if len(curEnum) == 0:
        curEnum = genEnumName(curCat, curName)
        retVal = True

    if curCat not in categories:
        print("[+] Added category '%s'" % (curCat,))
        categories[curCat] = curCatId
        curCatId += 1

    print("[+] Added %s in category %s" %(curEnum,curCat))
    enums[curEnum] = curCat

    newLines.append([curCat, curName, curDesc, curEnum])
    return retVal

mustUpdate = False
print("[*] Opening %s..." % (sys.argv[1],))
try:
    with open(sys.argv[1], "r") as csvfile:
        r = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in r:
            lineCtr += 1
            if headerLine is None:
                headerLine = row
                continue
            if handleLine(row):
                mustUpdate = True
except Exception as e:
    print("[!] Cannot open %s for reading: %s!" %(sys.argv[1],str(e)))
    exit(-1)

if not mustUpdate:
    print("[+] No need to update the csv file.")
else:
    print("[*] Updating %s..." % (sys.argv[1],))

    try:
        with open(sys.argv[1], "w") as csvfile:
            r = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)
            r.writerow(headerLine)
            for row in newLines:
                r.writerow(row)
            print("[+] Successfully updated csv file")
    except:
        print("[!] Cannot open %s for writing!" %(sys.argv[1],))
        exit(-1)

genHeaderFile(sys.argv[2], sys.argv[1])
