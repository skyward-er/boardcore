#!/bin/sh

# Copyright (c) 2021 Skyward Experimental Rocketry
# Author: Damiano Amatruda
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

print_banner() {
    cat <<EOF
+---------------------------------------------------------------+
|   ____  _                                _                    |
|  / ___|| | ___   ___      ____ _ _ __ __| |                   |
|  \\___ \\| |/ / | | \\ \\ /\\ / / _\` | '__/ _\` |                   |
|   ___) |   <| |_| |\\ V  V / (_| | | | (_| |                   |
|  |____/|_|\\_\\\\__, | \\_/\\_/ \\__,_|_|  \\__,_|                   |
|   ____       |___/    _   ____            _                   |
|  | __ ) _   _(_) | __| | / ___| _   _ ___| |_ ___ _ __ ___    |
|  |  _ \\| | | | | |/ _\` | \\___ \\| | | / __| __/ _ \\ '_ \` _ \\   |
|  | |_) | |_| | | | (_| |  ___) | |_| \\__ \\ ||  __/ | | | | |  |
|  |____/ \\__,_|_|_|\\__,_| |____/ \\__, |___/\\__\\___|_| |_| |_|  |
+----------------------------------|___/-------------------v3.2-+

EOF
}

ohai() {
    printf "${TTY_BLUE}==>${TTY_RESET}${TTY_BOLD} %s${TTY_RESET}\n" "$@";
}

init_dirs() {
    sbs_base="$(cd -- "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
    source_dir="$PWD"
    build_dir="$source_dir/build"
}

find_deps() {
    ohai "Find dependencies"

    command -v cmake           > /dev/null 2>&1 && found_cmake=true
    command -v ccache          > /dev/null 2>&1 && found_ccache=true
    command -v ninja           > /dev/null 2>&1 && found_ninja=true
    command -v cppcheck        > /dev/null 2>&1 && found_cppcheck=true
    command -v clang-format    > /dev/null 2>&1 && found_clangformat=true
    command -v python          > /dev/null 2>&1 && found_python=true
    command -v st-flash        > /dev/null 2>&1 && found_stflash=true
    command -v ST-LINK_CLI.exe > /dev/null 2>&1 && found_stlink=true

    printf "Found CMake: ";        [ "$found_cmake" = true ]       && echo "yes" || echo "no"
    printf "Found Ccache: ";       [ "$found_ccache" = true ]      && echo "yes" || echo "no"
    printf "Found Ninja: ";        [ "$found_ninja" = true ]       && echo "yes" || echo "no"
    printf "Found Cppcheck: ";     [ "$found_cppcheck" = true ]    && echo "yes" || echo "no"
    printf "Found clang-format: "; [ "$found_clangformat" = true ] && echo "yes" || echo "no"
    printf "Found Python: ";       [ "$found_python" = true ]      && echo "yes" || echo "no"
    printf "Found flasher: ";      [ "$found_stflash" = true ]     && echo "st-flash" \
                                    || ([ "$found_stlink" = true ] && echo "st-link" || echo "no")
    echo

    if [ "$found_cmake" = false ]; then
        echo "Error: CMake must be installed"
        exit 1
    fi
}

configure() {
    ohai "Configure"
    
    defs="-DCMAKE_TOOLCHAIN_FILE=$sbs_base/libs/miosix-kernel/miosix/_tools/toolchain.cmake"
    defs="$defs -DCMAKE_C_FLAGS=-fdiagnostics-color=always -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always"
    [ "$found_ccache" = true ]   && defs="$defs -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
    [ "$config_debug" = true ]   && defs="$defs -DCMAKE_BUILD_TYPE=Debug" || defs="$defs -DCMAKE_BUILD_TYPE=Release"
    [ "$config_verbose" = true ] && defs="$defs -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
    [ "$found_ninja" = true ]    && gen="-GNinja" || gen="-GUnix Makefiles"

    if cmake -B"$build_dir" $defs "$gen" "$source_dir"; then
        [ "$config_debug" = true ]   && touch "$build_dir/$DEBUG_FILENAME"   || rm -f "$build_dir/$DEBUG_FILENAME"
        [ "$config_verbose" = true ] && touch "$build_dir/$VERBOSE_FILENAME" || rm -f "$build_dir/$VERBOSE_FILENAME"
    fi
}

check_configured() {
    to_reconfigure=false

    if [ ! -d "$build_dir" ]; then
        to_reconfigure=true
    elif [ ! -f "$build_dir/$CMAKE_FILENAME" ]; then
        rm -rf "$build_dir"
        to_reconfigure=true
    else
        [ -f "$build_dir/$DEBUG_FILENAME" ]   && found_debug=true   || found_debug=false
        [ -f "$build_dir/$VERBOSE_FILENAME" ] && found_verbose=true || found_verbose=false
        if [ "$config_debug" != "$found_debug" ] \
                || [ "$config_verbose" != "$found_verbose" ]; then
            to_reconfigure=true
        fi
    fi

    if [ "$to_reconfigure" = true ]; then
        configure
        echo
    fi
    
    true
}

build() {
    if check_configured; then
        ohai "Build"
        
        cmake --build "$build_dir" $(get_jobs_opt) --target "$1"
    fi
}

lint_cppcheck() {
    ohai "Lint (Cppcheck)"

    # Real-time colored output of Cppcheck
    cppcheck --quiet --language=c++ --enable=all --inline-suppr --suppress=unusedFunction --suppress=missingInclude --error-exitcode=1 "$source_dir/src"
    echo
}

lint_clangformat() {
    ohai "Lint (clang-format)"

    # Real-time colored output of clang-format
    find "$source_dir/src" -type f \( -iname \*.cpp -o -iname \*.h -o -iname \*.c \) -exec clang-format --dry-run --Werror {} \;
    echo
}

lint_copyright() {
    ohai "Lint (Copyright)"

    "$sbs_base/scripts/linter.py" --copyright "$source_dir/src"
    echo
}

lint_find() {
    ohai "Lint (Find)"

    "$sbs_base/scripts/linter.py" --find "$source_dir/src"
    echo
}

lint() {
    if [ "$found_cppcheck" = true ]; then
        lint_cppcheck
    fi

    if [ "$found_clangformat" = true ]; then
        lint_clangformat
    fi

    if [ "$found_python" = true ]; then
        lint_copyright
        lint_find
    fi
}

clean() {
    ohai "Clean"

    if [ -f "$build_dir/$CMAKE_FILENAME" ]; then
        cmake --build "$build_dir" $(get_jobs_opt) --target clean && echo
    fi

    echo "Removing build folder..."
    rm -rf "$build_dir"
}

flash() {
    if build "$1"; then
        echo
        ohai "Flash"

        if [ ! -f "$build_dir/$1.bin" ]; then
            echo "Error: target '$1' is not flashable"
            return 1
        fi

        if [ "$found_stflash" = true ]; then
            st-flash --reset write "$build_dir/$1.bin" 0x8000000
        elif [ "$found_stlink" = true ]; then
            ST-LINK_CLI.exe -P "$build_dir/$1.bin" 0x8000000 -V -Rst
        else
            echo "Error: No flashing software found!"
        fi
    fi
}

list() {
    if check_configured; then
        ohai "List targets"

        echo "[1/1] All SBS targets available:"
        cmake --build "$build_dir" $(get_jobs_opt) --target help | grep -o '^[^/]*\.bin' | cut -f 1 -d '.'
    fi
}

boards() {
    if check_configured; then
        ohai "List boards"

        cmake --build "$build_dir" $(get_jobs_opt) --target help-boards
    fi
}

build_all() {
    build all
}

set_debug() {
    config_debug=true
}

set_verbose() {
    config_verbose=true
}

set_jobs() {
    build_jobs="$1"
}

get_jobs_opt() {
    [ -n "$build_jobs" ] && echo "-j $build_jobs" || echo
}

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
  -h, --help            Show this help message and exit
  -c, --clean           Clean the working tree
  -b TARGET, --build TARGET
                        Build a specific target
  -f TARGET, --flash TARGET
                        Build and flash a specific target
  -j JOBS, --jobs JOBS  Build in parallel using the given number of jobs
  -d, --debug           Enable debug
  -v, --verbose         Print a verbose output
  -l, --list            List all targets available
  -r, --boards          List all boards available
  -n, --lint            Lint the code
EOF
}

CMAKE_FILENAME="CMakeCache.txt"
DEBUG_FILENAME=".sbs_debug"
VERBOSE_FILENAME=".sbs_verbose"
TTY_BLUE="\033[34m"
TTY_BOLD="\033[1m"
TTY_RESET="\033[0m"

sbs_base=
source_dir=
build_dir=
found_cmake=false
found_ccache=false
found_ninja=false
found_cppcheck=false
found_clangformat=false
found_python=false
found_stflash=false
found_stlink=false
config_debug=false
config_verbose=false
build_jobs=

print_banner
init_dirs

for arg in "$@"; do
    shift
    case "$arg" in
        --help)     set -- "$@" "-h";;
        --clean)    set -- "$@" "-c";;
        --build)    set -- "$@" "-b";;
        --flash)    set -- "$@" "-f";;
        --jobs)     set -- "$@" "-j";;
        --debug)    set -- "$@" "-d";;
        --verbose)  set -- "$@" "-v";;
        --list)     set -- "$@" "-l";;
        --boards)   set -- "$@" "-r";;
        --lint)     set -- "$@" "-n";;
        *)          set -- "$@" "$arg"
    esac
done

while getopts hcb:f:j:dvlrn opt; do
    case "$opt" in
        h)  usage; exit 0;;
        c)  find_deps; clean; exit;;
        b)  find_deps; build "$OPTARG"; exit;;
        f)  find_deps; flash "$OPTARG"; exit;;
        j)  set_jobs "$OPTARG";;
        d)  set_debug;;
        v)  set_verbose;;
        l)  find_deps; list; exit;;
        r)  find_deps; boards; exit;;
        n)  find_deps; lint; exit;;
        ?)  usage; exit 2;;
    esac
done
shift $((OPTIND - 1))

find_deps
build_all
