#!/usr/bin/env bash

# Copyright (c) 2021 Skyward Experimental Rocketry
# Author: Damiano Amatruda
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

print_banner() {
    cat <<EOF
+---------------------------------------------------------------+
|   ____  _                                _                    |
|  / ___|| | ___   ___      ____ _ _ __ __| |                   |
|  \\___ \\| |/ / | | \\ \\ /\\ / / _\` | '__/ _\` |                   |
|   ___) |   <| |_| |\\ V  V / (_| | | | (_| |                   |
|  |____/|_|\\_\\\\__, | \\_/\\_/ \\__,_|_|  \\__,_|                   |
|   ____       |___/    _   ____            _                   |
|  | __ ) _   _(_) | __| | / ___| _   _ ___| |_ ___ _ __ ___    |
|  |  _ \\| | | | | |/ _\` | \\___ \\| | | / __| __/ _ \\ '_ \` _ \\   |
|  | |_) | |_| | | | (_| |  ___) | |_| \\__ \\ ||  __/ | | | | |  |
|  |____/ \\__,_|_|_|\\__,_| |____/ \\__, |___/\\__\\___|_| |_| |_|  |
+----------------------------------|___/-------------------v3.2-+

EOF
}

ohai() {
    printf "${TTY_BLUE}==>${TTY_RESET}${TTY_BOLD} %s${TTY_RESET}\n" "$@";
}

init_dirs() {
    sbs_base="$(cd -- "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
    source_dir="$PWD"
    build_dir="$source_dir/build"
    toolchain_file="$sbs_base/libs/miosix-kernel/miosix/_tools/toolchain.cmake"
}

find_deps() {
    ohai "Find dependencies"

    command -v cmake               > /dev/null 2>&1 && found_cmake=true
    command -v arm-miosix-eabi-g++ > /dev/null 2>&1 && found_miosixgpp=true
    command -v ccache              > /dev/null 2>&1 && found_ccache=true
    command -v ninja               > /dev/null 2>&1 && found_ninja=true
    command -v python              > /dev/null 2>&1 && found_python=true
    command -v cppcheck            > /dev/null 2>&1 && found_cppcheck=true
    command -v clang-tidy          > /dev/null 2>&1 && found_clangtidy=true
    command -v clang-format        > /dev/null 2>&1 && found_clangformat=true
    command -v st-flash            > /dev/null 2>&1 && found_stflash=true
    command -v ST-LINK_CLI.exe     > /dev/null 2>&1 && found_stlink=true

    printf "Found CMake: ";               [ "$found_cmake" = true ]       && echo "yes" || echo "no"
    printf "Found arm-miosix-eabi-g++: "; [ "$found_miosixgpp" = true ]   && echo "yes" || echo "no"
    printf "Found Ccache: ";              [ "$found_ccache" = true ]      && echo "yes" || echo "no"
    printf "Found Ninja: ";               [ "$found_ninja" = true ]       && echo "yes" || echo "no"
    printf "Found Python: ";              [ "$found_python" = true ]      && echo "yes" || echo "no"
    printf "Found Cppcheck: ";            [ "$found_cppcheck" = true ]    && echo "yes" || echo "no"
    printf "Found clang-tidy: ";          [ "$found_clangtidy" = true ]   && echo "yes" || echo "no"
    printf "Found clang-format: ";        [ "$found_clangformat" = true ] && echo "yes" || echo "no"
    printf "Found flasher: ";             [ "$found_stflash" = true ]     && echo "st-flash" \
                                            || { [ "$found_stlink" = true ] && echo "st-link" || echo "no"; }
    echo

    [ "$found_cmake" = true ]     || { echo "Error: CMake must be installed"; exit 1; }
    [ "$found_miosixgpp" = true ] || { echo "Error: arm-miosix-eabi-g++ must be installed"; exit 1; }
}

configure() {
    ohai "Configure"

    [ -f "$toolchain_file" ] || { echo "Error: CMake Toolchain File for Miosix was not found"; exit 1; }

    local defs=(-DCMAKE_EXPORT_COMPILE_COMMANDS=ON)
    defs+=(-DCMAKE_C_FLAGS=-fdiagnostics-color=always -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always)
    defs+=(-DCMAKE_TOOLCHAIN_FILE="$toolchain_file")
    [ "$found_ccache" = true ]   && defs+=(-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache)
    [ "$config_debug" = true ]   && defs+=(-DCMAKE_BUILD_TYPE=Debug) || defs+=( -DCMAKE_BUILD_TYPE=Release )
    [ "$config_verbose" = true ] && defs+=(-DCMAKE_VERBOSE_MAKEFILE=ON)

    local gen
    [ "$found_ninja" = true ] && gen=-GNinja || gen=-G"Unix Makefiles"

    if cmake -B"$build_dir" "${defs[@]}" "$gen" "$source_dir"; then
        [ "$config_debug" = true ]   && touch "$build_dir/$DEBUG_FILENAME"   || rm -f "$build_dir/$DEBUG_FILENAME"
        [ "$config_verbose" = true ] && touch "$build_dir/$VERBOSE_FILENAME" || rm -f "$build_dir/$VERBOSE_FILENAME"
    fi
}

check_configured() {
    local to_reconfigure=false

    if [ ! -d "$build_dir" ]; then
        to_reconfigure=true
    elif [ ! -f "$build_dir/$CMAKE_FILENAME" ]; then
        rm -rf "$build_dir"
        to_reconfigure=true
    else
        [ -f "$build_dir/$DEBUG_FILENAME" ]   && found_debug=true   || found_debug=false
        [ -f "$build_dir/$VERBOSE_FILENAME" ] && found_verbose=true || found_verbose=false
        if [ "$config_debug" != "$found_debug" ] \
                || [ "$config_verbose" != "$found_verbose" ]; then
            to_reconfigure=true
        fi
    fi

    if [ "$to_reconfigure" = true ]; then
        configure && echo
    else
        true
    fi
}

build() {
    if check_configured; then
        ohai "Build"

        local opts
        get_build_opts opts

        cmake --build "$build_dir" "${opts[@]}" --target "$1"
    fi
}

clean() {
    ohai "Clean"

    if [ -f "$build_dir/$CMAKE_FILENAME" ]; then
        local opts
        get_build_opts opts

        cmake --build "$build_dir" "${opts[@]}" --target clean && echo
    fi

    echo "Removing build folder..."
    rm -rf "$build_dir"
}

flash() {
    if build "$1"; then
        echo
        ohai "Flash"

        if [ ! -f "$build_dir/$1.bin" ]; then
            echo "Error: target '$1' is not flashable"
            return 1
        fi

        if [ "$found_stflash" = true ]; then
            st-flash --reset write "$build_dir/$1.bin" 0x8000000
        elif [ "$found_stlink" = true ]; then
            ST-LINK_CLI.exe -P "$build_dir/$1.bin" 0x8000000 -V -Rst
        else
            echo "Error: No flashing software found!"
        fi
    fi
}

list() {
    if check_configured; then
        ohai "List targets"

        local opts
        get_build_opts opts

        echo "[1/1] All SBS targets available:"
        cmake --build "$build_dir" "${opts[@]}" --target help \
            | grep -o '^[^/]*\.bin' | cut -f 1 -d '.'
    fi
}

boards() {
    if check_configured; then
        ohai "List boards"

        local opts
        get_build_opts opts

        cmake --build "$build_dir" "${opts[@]}" --target help-boards
    fi
}

lint_copyright() {
    ohai "Lint (Copyright)"

    "$sbs_base/scripts/linter.py" --copyright "$source_dir/src"
    echo
}

lint_find() {
    ohai "Lint (Find)"

    "$sbs_base/scripts/linter.py" --find "$source_dir/src"
    echo
}

lint_clangtidy() {
    if check_configured; then
        ohai "Lint (clang-tidy)"

        defs=(--extra-arg=-D_MIOSIX=1 --extra-arg=-D_MIOSIX_GCC_PATCH_MINOR=1 --extra-arg=-D_MIOSIX_GCC_PATCH_MAJOR=3 --extra-arg=-D__LINT__)
        IFS=$'\n' read -rd '' -a incs < <(arm-miosix-eabi-g++ -E -Wp,-v -xc++ /dev/null 2>&1 | sed -n "s/^ /--extra-arg=-isystem/p")

        local opts=()
        [ "$lint_edit" = true ] && opts+=(--fix-notes --fix-errors)

        find "$source_dir/src" \
            -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \) \
            -exec clang-tidy --header-filter=".*" -p="$build_dir" "${defs[@]}" "${incs[@]}" "${opts[@]}" {} \;
        echo
    fi
}

lint_cppcheck() {
    ohai "Lint (Cppcheck)"

    local opts
    get_cppcheck_opts opts

    cppcheck --language=c++ --std=c++11 --enable=all --inline-suppr \
        --suppress=unmatchedSuppression --suppress=unusedFunction \
        --suppress=missingInclude --error-exitcode=1 "${opts[@]}" \
        "$source_dir/src"
    echo
}

lint_clangformat() {
    ohai "Lint (clang-format)"

    local opts=(--style=file --Werror)
    [ "$lint_edit" = true ] && opts+=(-i) || opts+=(--dry-run)

    find "$source_dir/src" \
        -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \) \
        -exec clang-format "${opts[@]}" {} \;
    echo
}

lint() {
    if [ "$found_python" = true ]; then
        lint_copyright
        lint_find
    fi

    if [ "$found_clangtidy" = true ] && [ "$lint_clangtidy" = true ]; then
        lint_clangtidy
    fi

    if [ "$found_cppcheck" = true ]; then
        lint_cppcheck
    fi

    if [ "$found_clangformat" = true ]; then
        lint_clangformat
    fi
}

edit() {
    lint_edit=true
    lint
}

build_all() {
    build all
}

set_debug() {
    config_debug=true
}

set_verbose() {
    config_verbose=true
}

set_jobs() {
    jobs="$1"
}

get_build_opts() {
    local -n build_opts=$1
    [ -n "$jobs" ] && build_opts=("-j $jobs")
}

get_cppcheck_opts() {
    local -n cppcheck_opts=$1
    [ -n "$jobs" ] && cppcheck_opts=("-j $jobs")
}

set_clangtidy() {
    lint_clangtidy=true
}

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
  General Options:
    -h, --help            Show this help message and exit
    -j JOBS, --jobs JOBS  Build or lint in parallel using a specific number of jobs
    -l, --list            List all targets available
    -r, --boards          List all boards available

  Build Options:
    -b TARGET, --build TARGET
                          Build a specific target
    -f TARGET, --flash TARGET
                          Build and flash a specific target
    -c, --clean           Clean the working tree
    -u, --configure       Force configure and do not build
    -d, --debug           Enable debug
    -v, --verbose         Print a verbose output

  Lint Options:
    -n, --lint            Lint the code
    -e, --edit            Lint and edit the code
    --clang-tidy          Lint using also clang-tidy
EOF
}

CMAKE_FILENAME="CMakeCache.txt"
DEBUG_FILENAME=".sbs_debug"
VERBOSE_FILENAME=".sbs_verbose"
TTY_BLUE="\033[34m"
TTY_BOLD="\033[1m"
TTY_RESET="\033[0m"

sbs_base=
source_dir=
build_dir=
toolchain_file=
found_cmake=false
found_miosixgpp=false
found_ccache=false
found_ninja=false
found_python=false
found_cppcheck=false
found_clangtidy=false
found_clangformat=false
found_stflash=false
found_stlink=false
config_debug=false
config_verbose=false
jobs=
lint_edit=false
lint_clangtidy=false

print_banner
init_dirs

for arg in "$@"; do
    shift
    case "$arg" in
        --boards)     set -- "$@" "-r";;
        --build)      set -- "$@" "-b";;
        --clang-tidy) set_clangtidy;;
        --clean)      set -- "$@" "-c";;
        --configure)  set -- "$@" "-u";;
        --debug)      set -- "$@" "-d";;
        --edit)       set -- "$@" "-e";;
        --flash)      set -- "$@" "-f";;
        --help)       set -- "$@" "-h";;
        --jobs)       set -- "$@" "-j";;
        --lint)       set -- "$@" "-n";;
        --list)       set -- "$@" "-l";;
        --verbose)    set -- "$@" "-v";;
        *)            set -- "$@" "$arg"
    esac
done

while getopts b:cdef:hj:lnruv opt; do
    case "$opt" in
        b) find_deps; build "$OPTARG"; exit;;
        c) find_deps; clean; exit;;
        d) set_debug;;
        e) find_deps; edit; exit;;
        f) find_deps; flash "$OPTARG"; exit;;
        h) usage; exit 0;;
        j) set_jobs "$OPTARG";;
        l) find_deps; list; exit;;
        n) find_deps; lint; exit;;
        r) find_deps; boards; exit;;
        u) find_deps; configure; exit;;
        v) set_verbose;;
        ?) usage; exit 2;;
    esac
done
shift $((OPTIND - 1))

find_deps
build_all
