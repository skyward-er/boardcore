#!/usr/bin/env bash

# Copyright (c) 2024 Skyward Experimental Rocketry
# Author: Davide Basso
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

################################################################################
##############################      Constants     ##############################
################################################################################

# Terminal colors
TTY_RESET="$(tput sgr0)"
TTY_BOLD="$(tput bold)"
TTY_SUCCESS="$(tput setaf 70)"
TTY_ERROR="$(tput setaf 160)"

TTY_LOGO_1="$(tput setaf 200)"
TTY_LOGO_2="$(tput setaf 164)"
TTY_LOGO_3="$(tput setaf 93)"
TTY_LOGO_4="$(tput setaf 57)"
TTY_LOGO_5="$(tput setaf 27)"

# Error message
ERR=""$TTY_ERROR""$TTY_BOLD"ERROR"$TTY_RESET""

# Filenames/Dirnames
CMAKE_FILENAME="CMakeCache.txt"
CTEST_FILENAME="CTestTestfile.cmake"
DEBUG_FILENAME=".sbs_debug"
VERBOSE_FILENAME=".sbs_verbose"
BUILD_DEFAULT_DIRNAME="build"
BUILD_HOST_DIRNAME="cmake-build-host"

################################################################################
##############################    Global States   ##############################
################################################################################

sbs_base=
source_dir=
build_default_dir=
build_host_dir=
toolchain_file=

found_cmake=false
found_miosixgpp=false
found_ccache=false
found_ninja=false
found_python=false
found_cppcheck=false
found_clangtidy=false
found_clangformat=false
found_stflash=false
found_stlink=false

if git status &> /dev/null; then
  git_repo=$(basename `git rev-parse --show-toplevel`)
  git_branch=$(git rev-parse --abbrev-ref HEAD)
else
  git_repo="unknown"
  git_branch=""
fi

################################################################################
##############################       Banner       ##############################
################################################################################

banner="
$TTY_LOGO_1              _____ ____ _____                                  
$TTY_LOGO_2 ___________ / ___// __ ) ___/  ________________________________
$TTY_LOGO_3 __________  \__ \/ __  \__ \  _________________________________
$TTY_LOGO_4 _________  ___/ / /_/ /__/ / ____________________________v4.0__
$TTY_LOGO_5           /____/_____/____/                                    
$TTY_RESET                                                                 
"

print_configuration() {
	pre="SkywardBuildSystem @ $git_repo/$git_branch"
  	pre_colored=""$TTY_LOGO_5""$TTY_BOLD"SkywardBuildSystem"$TTY_RESET" @ "$TTY_LOGO_5""$TTY_BOLD""$git_repo"/"$git_branch""$TTY_RESET"\n"
	printf "$pre_colored"

	yf=""$TTY_SUCCESS""$TTY_BOLD"yes"$TTY_RESET""
	nf=""$TTY_ERROR""$TTY_BOLD"no"$TTY_RESET""
	
	# Print - for every letter in the pre string
	for (( i=0; i<${#pre}; i++ )); do printf -- "-"; done;
	printf "\n";

	printf ""$TTY_LOGO_5"cmake"$TTY_RESET":               "; [ "$found_cmake" = true       ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"arm-miosix-eabi-g++"$TTY_RESET": "; [ "$found_miosixgpp" = true   ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"ccache"$TTY_RESET":              "; [ "$found_ccache" = true      ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"ninja"$TTY_RESET":               "; [ "$found_ninja" = true       ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"python"$TTY_RESET":              "; [ "$found_python" = true      ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"cppcheck"$TTY_RESET":            "; [ "$found_cppcheck" = true    ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"clang-tidy"$TTY_RESET":          "; [ "$found_clangtidy" = true   ] && echo "$yf" || echo "$nf"
	printf ""$TTY_LOGO_5"clang-format"$TTY_RESET":        "; [ "$found_clangformat" = true ] && echo "$yf" || echo "$nf"

	printf ""$TTY_LOGO_5"flasher"$TTY_RESET":             "; 
	if [ "$found_stflash" = true ]; then
		echo ""$TTY_SUCCESS""$TTY_BOLD"st-flash"$TTY_RESET""
	elif [ "$found_stlink" = true ]; then
		echo ""$TTY_SUCCESS""$TTY_BOLD"st-link"$TTY_RESET""
	else
		echo "$nf"
	fi

	[ "$found_cmake" = true ]     || { echo ""$ERR": CMake must be installed"; return 1; }
    [ "$found_miosixgpp" = true ] || { echo ""$ERR": arm-miosix-eabi-g++ must be installed"; return 1; }
}

################################################################################
##############################         CLI        ##############################
################################################################################

# Filter all the arguments that are flags
# The syntax is: filter_flags "arg1" "arg2" ... "argN"
# Returns a list of flags in the form "--flag=value" or "--flag"
filter_flags() {
    flags=()
    prev_is_flag=false

    for arg in "$@"; do
        if [[ "$arg" == -* ]]; then
            flags+=("$arg")
            prev_is_flag=true
        else
            if [ "$prev_is_flag" = true ]; then
                # if the previous argument was a flag, then this is a flag value
                flags[-1]="${flags[-1]}=$arg"
            fi

            prev_is_flag=false
        fi
    done

    echo "${flags[@]}"
}


# Filter all the arguments that are not flags
filter_args() {
    args=()
    prev_is_flag=false

    for arg in "$@"; do
        if [[ "$arg" == -* ]]; then
            prev_is_flag=true
        elif [ "$prev_is_flag" = true ]; then
            prev_is_flag=false
        else
            args+=("$arg")
        fi
    done

    echo "${args[@]}"
}

# Checks that no unknown flags are passed
# The syntax is: cmd_flags "known_flags" "flags"
cmd_flags() {    
    known_flags=("${!1}")
    flags=("${!2}")

    for flag in "${flags[@]}"; do
        # ignore ''
        if [ -z "$flag" ]; then
            continue
        fi
        
        found=false
        for known_flag in "${known_flags[@]}"; do
            # if the know_flag is of type --flag=, allow flags with value
            if [[ "$known_flag" == *= ]]; then
                if [[ "$flag" == "$known_flag"* ]]; then
                    found=true
                    break
                fi
            else
                if [ "$flag" == "$known_flag" ]; then
                    found=true
                    break
                fi
            fi
        done

        if [ "$found" = false ]; then
            echo ""$ERR": Unknown flag $flag"
            return 1
        fi
    done
}

# Checks that no more than a certain number of arguments are passed
# The syntax is: cmd_args "max_args" "arg1" "arg2" ... "argN"
cmd_args() {
    max_args=$1
    shift
    args=("${!1}")
    if [ "${#args[@]}" -gt "$max_args" ]; then
        echo ""$ERR": Too many arguments"
        return 1
    fi
}

# Checks if a flag exists in the list of flags
# The syntax is: flag_exists "flag" "flag1" "flag2" ... "flagN"
flag_exists() {
    flag=$1
    shift
    flags=("${!1}")

    if [[ " ${flags[@]} " =~ " ${flag} " ]]; then
        echo "true"
    else
        echo "false"
    fi
}

# Get the value of a flag
# The syntax is: get_flag_value "possible_flags" "flags"
get_flag_value() {
    possible_flags=("${!1}")
    flags=("${!2}")

    for flag in "${flags[@]}"; do
        for possible_flag in "${possible_flags[@]}"; do
            if [[ "$flag" == "$possible_flag"* ]]; then
                # strip the value from the flag
                echo "${flag#*=}"
                return
            fi
        done
    done
}

# Print a step message
step() {
	printf "\n"$TTY_LOGO_5""$TTY_BOLD"$1"$TTY_RESET"\n"
	# Print - for every letter in the pre string
	for (( i=0; i<${#1}; i++ )); do printf -- "-"; done;
	printf "\n";
}

################################################################################
##############################      Internals     ##############################
################################################################################

# Find all the dependencies
find_deps() {    
    command -v cmake               > /dev/null 2>&1 && found_cmake=true
    command -v arm-miosix-eabi-g++ > /dev/null 2>&1 && found_miosixgpp=true
    command -v ccache              > /dev/null 2>&1 && found_ccache=true
    command -v ninja               > /dev/null 2>&1 && found_ninja=true
    command -v python              > /dev/null 2>&1 && found_python=true
    command -v cppcheck            > /dev/null 2>&1 && found_cppcheck=true
    command -v clang-tidy          > /dev/null 2>&1 && found_clangtidy=true
    command -v clang-format        > /dev/null 2>&1 && found_clangformat=true
    command -v st-flash            > /dev/null 2>&1 && found_stflash=true
    command -v ST-LINK_CLI.exe     > /dev/null 2>&1 && found_stlink=true
}

# Initialize all the directories
init_dirs() {
    sbs_base="$(cd -- "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
    source_dir="$PWD"
    build_default_dir="$source_dir/$BUILD_DEFAULT_DIRNAME"
    build_host_dir="$source_dir/$BUILD_HOST_DIRNAME"
    toolchain_file="$sbs_base/libs/miosix-kernel/miosix/cmake/toolchain.cmake"
}

# Get the build options for cmake
# The syntax is: get_build_opts "opts" "jobs"
get_build_opts() {
    build_opts=$1
    # jobs is $2 with a default value of NPROCESSORS_ONLN - 2
    n_processors=$(getconf _NPROCESSORS_ONLN)
    jobs=${2:-$((n_processors - 2))}

    echo "- Building with $jobs jobs"
    [ -n "$jobs" ] && build_opts=("-j $jobs")
}

# workaround: disable tests in excluded subdirectories
# see: https://gitlab.kitware.com/cmake/cmake/-/issues/20212
cmake_disable_excluded_tests() {
    declare build_dir="$1"
    
    [ ! -f "$build_dir/$CTEST_FILENAME" ] || sed -i.bak 's/^subdirs/# subdirs/' "$build_dir/$CTEST_FILENAME"
}

################################################################################
##############################     Subcommands    ##############################
################################################################################

# Check if the project is configured
# The syntax is: check_configured "build_dir" "config_debug" "config_verbose" "config_host"
check_configured() {
    build_dir="$1"
    config_debug="$2"
    config_verbose="$3"
    config_host="$4"

    to_reconfigure=false
    
    if [ ! -d "$build_dir" ]; then
        to_reconfigure=true
        elif [ ! -f "$build_dir/$CMAKE_FILENAME" ]; then
        rm -rf "$build_dir"
        to_reconfigure=true
    else
        [ -f "$build_dir/$DEBUG_FILENAME" ]   && found_debug=true   || found_debug=false
        [ -f "$build_dir/$VERBOSE_FILENAME" ] && found_verbose=true || found_verbose=false
        if [ "$config_debug" != "$found_debug" ] \
        || [ "$config_verbose" != "$found_verbose" ]; then
            to_reconfigure=true
        fi
    fi
    
    if [ "$to_reconfigure" = true ]; then
        step "configuring"

        printf "Reconfiguring project with the following options:\n"
        printf "  - Debug:   %s\n" "$config_debug"
        printf "  - Verbose: %s\n" "$config_verbose"
        printf "  - Host:    %s\n" "$config_host"

        [ -f "$toolchain_file" ] || { echo ""$ERR": CMake Toolchain File for Miosix was not found"; return 1; }
        
        declare -a defs=(-DCMAKE_EXPORT_COMPILE_COMMANDS=ON)
        defs+=(-DCMAKE_C_FLAGS=-fdiagnostics-color=always -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always)
        [ "$config_host" = false ]   && defs+=(-DCMAKE_TOOLCHAIN_FILE="$toolchain_file" -DBUILD_TESTING=OFF)
        [ "$found_ccache" = true ]   && defs+=(-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache)
        [ "$config_debug" = true ]   && defs+=(-DCMAKE_BUILD_TYPE=Debug) || defs+=(-DCMAKE_BUILD_TYPE=Release)
        [ "$config_verbose" = true ] && defs+=(-DCMAKE_VERBOSE_MAKEFILE=ON)
        
        declare gen
        [ "$found_ninja" = true ] && gen=-GNinja || gen=-G"Unix Makefiles"
        
        cmake -B"$build_dir" "${defs[@]}" "$gen" "$source_dir" || return
        
        { [ "$config_debug" = true ]   && touch "$build_dir/$DEBUG_FILENAME";   } || rm -f "$build_dir/$DEBUG_FILENAME"
        { [ "$config_verbose" = true ] && touch "$build_dir/$VERBOSE_FILENAME"; } || rm -f "$build_dir/$VERBOSE_FILENAME"
    fi
}

lint_copyright() {
    step "linting copyright"

    "$sbs_base/scripts/linter.py" --copyright "$source_dir/src"
}

lint_find() {
    step "linting find"

    "$sbs_base/scripts/linter.py" --find "$source_dir/src"
}

lint_clangtidy() {
    build_dir="$1"
    
    step "linting clang-tidy"

    config_host=false
    config_debug=false
    config_verbose=false

    defs=(--extra-arg=-D_MIOSIX=1 --extra-arg=-D_MIOSIX_GCC_PATCH_MINOR=1 \
        --extra-arg=-D_MIOSIX_GCC_PATCH_MAJOR=3 --extra-arg=-D__LINT__)
    IFS=$'\n' read -rd '' -a incs < \
        <(arm-miosix-eabi-g++ -E -Wp,-v -xc++ /dev/null 2>&1 \
        | sed -n "s/^ /--extra-arg=-isystem/p")
    
    declare opts=()
    [ "$to_edit" = true ] && opts+=(--fix-notes --fix-errors)
    
    find "$source_dir/src" \
        -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \) \
        -exec clang-tidy --header-filter=".*" -p="$build_dir" "${defs[@]}" \
        "${incs[@]}" "${opts[@]}" {} \;
}

lint_cppcheck() {
    step "linting cppcheck"

    echo "Running cppcheck..."

    cppcheck --language=c++ --std=c++14 --enable=all --inline-suppr \
        --suppress=unmatchedSuppression --suppress=unusedFunction \
        --suppress=missingInclude --error-exitcode=1 -q \
        "$source_dir/src"
}

lint_clangformat() {
    step "linting clang-format"

    echo "Running clang-format..."

    opts=(--style=file --Werror --dry-run)

    find "$source_dir/src" \
    -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \) \
    -exec clang-format "${opts[@]}" {} \;
}

################################################################################
##############################   Native Commands  ##############################
################################################################################

build() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    jobs_flag=("-j" "--jobs")
    known_flags=("-d" "-v" "-h" "-j=" "--debug" "--verbose" "--host" "--jobs=")

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 1 args[@] || return

    jobs=$(get_flag_value jobs_flag[@] flags[@])

    [ "$(flag_exists "-d" flags[@])" = true ] || [ "$(flag_exists "--debug"   flags[@])" = true ] && config_debug=true   || config_debug=false
    [ "$(flag_exists "-v" flags[@])" = true ] || [ "$(flag_exists "--verbose" flags[@])" = true ] && config_verbose=true || config_verbose=false
    [ "$(flag_exists "-h" flags[@])" = true ] || [ "$(flag_exists "--host"    flags[@])" = true ] && config_host=true    || config_host=false
    [ "$config_host" = true ] && build_dir="$build_host_dir" || build_dir="$build_default_dir"

    target=${args[0]:-all}

    check_configured "$build_dir" "$config_debug" "$config_verbose" "$config_host" || return
    
    step "building"

    declare opts
    get_build_opts opts $jobs
    
    cmake --build "$build_dir" "${opts[@]}" --target "$target"
}

clean() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    known_flags=("-h" "--host")

    step "cleaning"
    cmd_flags known_flags[@] flags[@] || return
    cmd_args 0 args[@] || return

    [ "$(flag_exists "-h" flags[@])" = true ] || [ "$(flag_exists "--host" flags[@])" = true ] && config_host=true || config_host=false
    
    if [ "$config_host" = true ]; then
        echo "Cleaning host build directory"
        rm -rf "$build_host_dir"
    else
        echo "Cleaning default build directory"
        rm -rf "$build_default_dir"
    fi
}

flash() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    jobs_flag=("-j" "--jobs")
    known_flags=("-d" "-v" "-r" "-j=" "--debug" "--verbose" "--reset" "--jobs=")

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 1 args[@] || return

    config_host=false # cannot flash host build
    build_dir="$build_default_dir"

    jobs=$(get_flag_value jobs_flag[@] flags[@])

    [ "$(flag_exists "-d" flags[@])" = true ] || [ "$(flag_exists "--debug"   flags[@])" = true ] && config_debug=true   || config_debug=false
    [ "$(flag_exists "-v" flags[@])" = true ] || [ "$(flag_exists "--verbose" flags[@])" = true ] && config_verbose=true || config_verbose=false
    [ "$(flag_exists "-r" flags[@])" = true ] || [ "$(flag_exists "--reset"   flags[@])" = true ] && reset=true          || reset=false

    target=${args[0]}

    if [ -z "$target" ]; then
        echo ""$ERR": No target specified"
        return 1
    fi

    check_configured "$build_dir" "$config_debug" "$config_verbose" "$config_host" || return
    
    # build the target
    step "building"

    declare opts
    get_build_opts opts $jobs
    
    cmake --build "$build_dir" "${opts[@]}" --target "$target"
    
    # check if the target is flashable
    [ -f "$build_dir/$target.bin" ] || { echo "Error: target '$target' is not flashable"; return 1; }
    
    # flash the target
    step "flashing"

    flash_opts=()
    [ "$reset" = true ] && flash_opts+=("--connect-under-reset")

    if [ "$found_stflash" = true ]; then
        st-flash --reset "${opts[@]}" write "$build_dir/$target.bin" 0x8000000 
    elif [ "$found_stlink" = true ]; then
        ST-LINK_CLI.exe -P "$build_dir/$target.bin" 0x8000000 -V -Rst
    else
        echo ""$ERR": No flashing software found!"
        return 1
    fi
}

test() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    jobs_flag=("-j" "--jobs")
    known_flags=("-j=" "--jobs=")

    cmd_flags know_flags[@] flags[@] || return
    cmd_args 1 args[@] || return

    config_host=true
    config_debug=true
    config_verbose=false
    build_dir="$build_host_dir"

    jobs=$(get_flag_value jobs_flag[@] flags[@])

    target=${args[0]}

    if [ -z "$target" ]; then
        echo ""$ERR": No target specified"
        return 1
    fi

    check_configured "$build_dir" "$config_debug" "$config_verbose" "$config_host" || return

    # build the target
    step "building"

    declare opts
    get_build_opts opts $jobs
    
    cmake --build "$build_dir" "${opts[@]}" --target "$target"
    
    # run the tests
    step "testing"
    
    cmake_disable_excluded_tests "$build_dir"
    ( cd "$build_dir" || return; ctest )
}

list() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    known_flags=()

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 1 args[@] || return

    config_host=false
    config_debug=false
    config_verbose=false
    build_dir="$build_default_dir"

    check_configured "$build_dir" "$config_debug" "$config_verbose" "$config_host" || return

    list_type=${args[0]}

    if [ -z "$list_type" ]; then
        echo ""$ERR": No list type specified"
        return 1
    fi

    if [ "$list_type" = "targets" ]; then
        step "listing targets"

        echo "[1/1] All targets available:"
        cmake --build "$build_dir" --target help \
            | grep -o '^[^/]*\.bin' | cut -f 1 -d '.'
    elif [ "$list_type" = "boards" ]; then
        step "listing boards"

        cmake --build "$build_dir" "${opts[@]}" --target help-boards
    else
        echo ""$ERR": Unknown list type $list_type"
        return 1
    fi
}

lint() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    known_flags=()

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 0 args[@] || return

    if [ "$found_python" = true ]; then
        lint_copyright
        lint_find
    else
        echo "Python not found, skipping copyright and find..."
    fi

    # Disable clang-tidy for now, as too many false positives
    # if [ "$found_clangtidy" = true ]; then
    #     lint_clangtidy "$build_default_dir"
    # else
    #     echo "Clang-tidy not found, skipping clang-tidy..."
    # fi

    if [ "$found_cppcheck" = true ]; then
        lint_cppcheck
    else
        echo "Cppcheck not found, skipping cppcheck..."
    fi

    if [ "$found_clangformat" = true ]; then
        lint_clangformat
    else
        echo "Clang-format not found, skipping clang-format..."
    fi
}

format() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    known_flags=()

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 0 args[@] || return

    step "formatting"

    echo "Running clang-format..."

    opts=(--style=file --Werror -i)

    find "$source_dir/src" \
    -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \) \
    -exec clang-format "${opts[@]}" {} \;
}

help() {
    echo "Usage: sbs (command) <args> [options] "
    echo ""
    echo "Commands:"
    echo " build     - Build the specified target"
    echo "           -> <target=all> [-d|--debug] [-v|--verbose] [-h|--host] [-j|--jobs=<jobs>]"
    echo " clean     - Clean the build directory"
    echo "           -> [-h|--host]"
    echo " flash     - Flash the specified target"
    echo "           -> <target> [-d|--debug] [-v|--verbose] [-r|--reset] [-j|--jobs=<jobs>]"
    echo " test      - Run the tests for the specified target"
    echo "           -> <target> [-j|--jobs=<jobs>]"
    echo " list      - List the available targets or boards"
    echo "           -> <targets|boards>"
    echo " lint      - Lint the source code"
    echo " format    - Format the source code"
    echo " install   - Install autocomplete"
    echo " uninstall - Uninstall autocomplete"
    echo ""
    echo "Options:"
    echo " -d, --debug:   Build in debug mode"
    echo " -v, --verbose: Build in verbose mode"
    echo " -h, --host:    Build for the host"
    echo " -r, --reset:   Reset the target before flashing"
    echo " -j, --jobs:    Number of jobs to run in parallel"
    echo ""
}

################################################################################
##############################   Python Commands  ##############################
################################################################################


install() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    known_flags=()

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 0 args[@] || return

    step "autocomplete"

    if [ "$found_python" = false ]; then
        echo ""$ERR": Python is required to install autocomplete"
        return 1
    fi

    config_host=false
    config_debug=false
    config_verbose=false
    build_dir="$build_default_dir"

    echo "Retrieving targets..."

    targets=$(cmake --build "$build_dir" --target help \
        | grep -o '^[^/]*\.bin' | cut -f 1 -d '.')

    # split the targets on newlines
    IFS=$'\n' read -rd '' -a targets <<< "$targets"

    echo "Found ${#targets[@]} targets"

    python "$sbs_base/scripts/autocomplete.py" "--install" "${targets[@]}"
}

uninstall() {
    IFS=' ' read -r -a flags <<< "$(filter_flags "$@")"
    IFS=' ' read -r -a args <<< "$(filter_args "$@")"

    known_flags=()

    cmd_flags known_flags[@] flags[@] || return
    cmd_args 0 args[@] || return

    step "autocomplete"

    if [ "$found_python" = false ]; then
        echo ""$ERR": Python is required to uninstall autocomplete"
        return 1
    fi

    python "$sbs_base/scripts/autocomplete.py" "--uninstall"
}

################################################################################
##############################        Main        ##############################
################################################################################

init() {
    echo "$banner"

    find_deps
    init_dirs
    print_configuration
}


for arg in "$@"; do
    case $arg in
        build)     init; build "${@:2}"; exit ;;
        clean)     init; clean "${@:2}"; exit ;;
        flash)     init; flash "${@:2}"; exit ;;
        test)      init; test  "${@:2}"; exit ;;
        list)      init; list  "${@:2}"; exit ;;
        lint)      init; lint  "${@:2}"; exit ;;
        format)    init; format; exit ;;
        install)   init; install; exit ;;
        uninstall) init; uninstall; exit ;;
        *)         help; exit ;;
    esac
done

if [ "$#" -eq 0 ]; then
    help
fi