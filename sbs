#!/usr/bin/python

# Skyward Build System Configuration File
#
# Copyright (c) 2015-2016 Skyward Experimental Rocketry
# Authors: Alain Carlucci
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from optparse import OptionParser
import os, shutil, subprocess, sys

try:
    import ConfigParser as cp #python 2
except ImportError:
    import configparser as cp #python 3

#
# Global variables
#
srcfiles={}
boards={}
tests={}
entrypoints={}

projconf = {
    "ENTRY_PATH":"src/entrypoints",
    "TESTS_PATH":"src/tests",
    "SRC_PATH":"src/shared",
    "SBS_BASE": ".",
    "PROJECT_INCLUDES": "",
    "PROJECT_SUBDIRS": "",
    "PROJECT_LIBS": ""
}

#
# ASCII art
#
def printBanner():
    print("+---------------------------------------------------------------+")
    print("|   ____  _                                _                    |")
    print("|  / ___|| | ___   ___      ____ _ _ __ __| |                   |")
    print("|  \\___ \\| |/ / | | \\ \\ /\\ / / _` | '__/ _` |                   |")
    print("|   ___) |   <| |_| |\\ V  V / (_| | | | (_| |                   |")
    print("|  |____/|_|\\_\\\\__, | \\_/\\_/ \\__,_|_|  \\__,_|                   |")
    print("|   ____       |___/    _   ____            _                   |")
    print("|  | __ ) _   _(_) | __| | / ___| _   _ ___| |_ ___ _ __ ___    |")
    print("|  |  _ \\| | | | | |/ _` | \\___ \\| | | / __| __/ _ \\ '_ ` _ \\   |")
    print("|  | |_) | |_| | | | (_| |  ___) | |_| \\__ \\ ||  __/ | | | | |  |")
    print("|  |____/ \\__,_|_|_|\\__,_| |____/ \\__, |___/\\__\\___|_| |_| |_|  |")
    print("+----------------------------------|___/-------------------v2.0-+")

#
# Command line options
#
def configCmdParser():
	parser = OptionParser()
	parser.add_option("-c", "--clean", help="Run a 'make clean'", dest="clean", 
		action="store_true")
	parser.add_option("-b", "--build", help="Build a specific entrypoint or test", dest="board")
	parser.add_option("-l", "--list", help="List all possible configurations", dest="list",
	    default=False, action='store_true')
	parser.add_option("-t", "--all-test", help="Build all tests", dest="all_tests", default=False, action='store_true')
	parser.add_option("-e", "--all-entrypoint", help="Build all entrypoints", dest="all_entry", default=False, action='store_true')
	parser.add_option("-g", "--gen-faults", help="Generate fault list header files and exit", dest="genhdr", default=False, action='store_true')
	parser.add_option("-v", "--verbose", help="Print a verbose output", dest="log", 
		action="store_true")
	parser.add_option("-j", "--jobs", 
		help="Specifies the number of jobs (commands) to run simultaneously.", 
		type="int", dest="JOBS", default=8)
	return parser

#
# Generate fault counter headers
#
def genFaultCounters():
    d1 = "data/fault_list.csv"
    d2 = SBS_BASE + "/src/shared/diagnostic/FaultCounterData.h"
    os.system("python %s/scripts/gen_fault_headers.py %s %s" %(SBS_BASE,d1,d2))

#
# Import srcfiles from boardcore's sbs.conf
#
def importSrcFiles(path):
    conf = cp.RawConfigParser()
    conf.read(path)

    for i in conf.sections():
        stype = conf.get(i, 'Type')
        if stype == 'srcfiles':
            srcfiles[i] = [projconf['SBS_BASE'] + "/" + x.strip() for x in conf.get(i, 'Files').split("\n")]

#
# Import project's conf
#
def parseConf(path):
    mainmask = projconf['ENTRY_PATH'] + "/%s.cpp"
    testmask = projconf['TESTS_PATH'] + "/%s.cpp"
    conf = cp.RawConfigParser()
    conf.read(path)

    # Populate entrypoints and tests 
    for i in conf.sections():
        stype = conf.get(i, 'Type')
        if stype == 'srcfiles':
            srcfiles[i] = [x.strip() for x in conf.get(i, 'Files').split("\n")]
        elif stype == 'board':
            entrypoints[i] = {   'id': conf.get(i, 'BoardId'), 
                            'bin': conf.get(i, 'BinName'),
                            'defines': conf.get(i, 'Defines'),
                            'files': [mainmask % conf.get(i, 'Main').strip()] +
                             [x.strip() for x in conf.get(i, 'Include').split(' ')]
                        }    
        elif stype == 'test':
            tests[i] = {   'id': conf.get(i, 'BoardId'), 
                            'bin': conf.get(i, 'BinName'),
                            'defines': conf.get(i, 'Defines') + " -I" + projconf['TESTS_PATH'],
                            'files': [testmask % conf.get(i, 'Main').strip()] +
                             [x.strip() for x in conf.get(i, 'Include').split(' ')]
                        }
        elif stype != 'project':
            print('Type not implemented')

    # Join tests and entrypoints in boards
    boards.update(entrypoints)
    boards.update(tests)

    # Substitute includes
    for i in boards:
        files = []
        for j in boards[i]['files']:
            if j.startswith('%'):
                files += srcfiles[j[1:]]
            else:
                files += [j]
        boards[i]['files'] = files

#
# Set project parameters (for projects that are not boardcore)
#
def readProjectParams(conf):
    global projconf

    for i in projconf:
        projconf[i] = conf.get('SBS_PROJECT', i)

#
# Fill in Makefile.template
#
def build_makefile(template, board, bname):
    global projconf
    incllist = projconf["PROJECT_INCLUDES"].split()
    liblist = projconf["PROJECT_LIBS"].split()
    subdirs = projconf["PROJECT_SUBDIRS"].split()

    rmap = { "BOARD_DEFINE": "export OPT_BOARD := %s\nexport BOARD_UUID := %s\n" % (board['id'], bname),
             "MAP_FILE": "export MAIN_MAP_FILE := bin/%s.map\n" % board['bin'],
             "SOURCE_FILES": "%s\n" % (" ".join(board['files'])),
             "CUSTOM_DEFINES": board['defines'],
             "BIN_NAME": board['bin']
    }

    rmap["PROJECT_INCLUDES"] = ""
    rmap["PROJECT_LIBS"] = ""
    rmap["PROJECT_SUBDIRS"] = ""

    for incl in incllist:
        rmap["PROJECT_INCLUDES"] += incl + " "
    
    for lib in liblist:
        rmap["PROJECT_LIBS"] += lib + " "
    
    for sd in subdirs:
        rmap["PROJECT_SUBDIRS"] += sd + " "

    for i in rmap:
        template = template.replace("{SBS_%s}" % i , rmap[i])

    template = template.replace('{SBS_BASE_PATH}', projconf['SBS_BASE'])

    return template

#-------------------------------------------------------------
#     Main

printBanner()

parser = configCmdParser()
(options, args) = parser.parse_args()

# Fault headers generation
if options.genhdr == True:
    genFaultCounters()
    exit(0)

# Check if it's an external project
conf = cp.RawConfigParser()
conf.read("sbs.conf")
if 'SBS_PROJECT' in conf.sections():
    readProjectParams(conf)
    importSrcFiles(projconf['SBS_BASE'] + "/sbs.conf")

# Parse conf file
parseConf("sbs.conf")

if (len(boards) == 0 ):
    print('[SBS] Nothing found in sbs.conf . Terminating.')
    exit(0)

# Load Makefile template
make_template = ""
with open( projconf['SBS_BASE'] + '/Makefile.template') as f:
    make_template = str(f.read())

if len(make_template) == 0:
    print('Makefile template empty or not found')
    sys.exit(-1)


# Do things
# List
if options.list == True:
    print('[SBS] List of available entrypoints:')
    for entrypoint in entrypoints:
        print(entrypoint)
    print('\n[SBS] List of available tests:')
    for test in tests:
        print(test)
    sys.exit(0)

# Clean before build
shutil.rmtree('build',ignore_errors=True, onerror=None)
os.mkdir('build')

# Single board
if options.board != None:
    try:
        good = boards[options.board]
        boards = {options.board : good}
    except KeyError:
        print('[SBS] Board or test not found. Terminating.')
        sys.exit(2)
# Build entrypoints
elif options.all_entry == True:
    boards = entrypoints
# Build tests
elif options.all_tests == True:
    boards = tests

# Verbose
cleanparam = []
if options.log == True:
    procout = None
else:
    procout = open(os.devnull, 'w') 

# Build
action = ["Build","Building"]
if options.clean == True:
    cleanparam = ["clean"]
    action = ["Clean", "Cleaning"]

for i in boards:
    print('[SBS] %s %s' % (action[1],i))
    with open('build/%s' % i, 'w') as f:
        f.write(build_makefile(make_template, boards[i], i))
    try:
        subprocess.check_call(['make', '-j', str(options.JOBS), '-f', 'build/%s' % i] + cleanparam, stdout=procout)
    except subprocess.CalledProcessError:
        print('[SBS] %s Failed. Terminating.' % action[0])
        sys.exit(-1)

    print('[SBS] %s OK' % action[0])

# Clean
if options.clean == True:
    shutil.rmtree('build',ignore_errors=True, onerror=None)
