#!/usr/bin/env bash

# Copyright (c) 2024 Skyward Experimental Rocketry
# Authors: Davide Basso, NiccolÃ² Betto
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

################################################################################
##############################      Constants     ##############################
################################################################################

# Terminal colors
TTY_RESET="\033[0m"
TTY_BOLD="\033[1m"
TTY_FOUND="\033[35m"
TTY_SUCCESS="\033[32m"
TTY_ERROR="\033[31m"
TTY_STEP="\033[94m"

TTY_LOGO_1="\033[38;5;200m"
TTY_LOGO_2="\033[38;5;164m"
TTY_LOGO_3="\033[38;5;93m"
TTY_LOGO_4="\033[38;5;57m"
TTY_LOGO_5="\033[38;5;27m"

# Error message
ERR=""$TTY_ERROR""$TTY_BOLD"ERROR"$TTY_RESET""

# Error codes
EPERM=1     # Operation not permitted
ENOENT=2    # No such file or directory
ENOEXEC=8   # Exec format error
ENODEV=19   # No such device
EINVAL=22   # Invalid argument
ENOPKG=65   # Package not installed
ENOTSUP=95  # Operation not supported

# Filenames/Dirnames
CMAKE_FILENAME="CMakeCache.txt"
CTEST_FILENAME="CTestTestfile.cmake"
DEBUG_FILENAME=".sbs_debug"
VERBOSE_FILENAME=".sbs_verbose"
BUILD_DEFAULT_DIRNAME="build"
BUILD_HOST_DIRNAME="build-host"

# Logical cores count, cross platform
N_PROC=$(
    nproc 2>/dev/null ||                      # Linux
    sysctl -n hw.logicalcpu 2>/dev/null ||    # macOS
    getconf _NPROCESSORS_ONLN 2>/dev/null ||  # POSIX
    echo 1                                    # Fallback to 1 core
)
OS=$(uname -s)

################################################################################
##############################    Global States   ##############################
################################################################################

sbs_base=
source_dir=
build_default_dir=
build_host_dir=
toolchain_file=

found_cmake=false
found_miosixgpp=false
found_ccache=false
found_ninja=false
found_python=false
found_cppcheck=false
found_clangtidy=false
found_clangformat=false
found_stflash=false
found_stlink=false

config_build_dir=
config_host=false
config_debug=false
config_verbose=false
config_reset=false
config_jobs=$N_PROC

# Set to true if a target is required for the build command (e.g. flash, run)
target_required=false

################################################################################
##############################       Banner       ##############################
################################################################################

banner="\
$TTY_LOGO_1              _____ ____ _____
$TTY_LOGO_2 ___________ / ___// __ ) ___/  ________________________________
$TTY_LOGO_3 __________  \__ \/ __  \__ \  _________________________________
$TTY_LOGO_4 _________  ___/ / /_/ /__/ / ____________________________v4.0__
$TTY_LOGO_5           /____/_____/____/
$TTY_RESET"

print_configuration() {
    step "Dependencies"

    yf=""$TTY_SUCCESS""$TTY_BOLD"Yes"$TTY_RESET""
    nf=""$TTY_ERROR""$TTY_BOLD"No"$TTY_RESET""

    printf "cmake:               "; [ "$found_cmake" = true       ] && printf "$yf\n" || printf "$nf\n"
    printf "arm-miosix-eabi-g++: "; [ "$found_miosixgpp" = true   ] && printf "$yf\n" || printf "$nf\n"
    printf "ccache:              "; [ "$found_ccache" = true      ] && printf "$yf\n" || printf "$nf\n"
    printf "ninja:               "; [ "$found_ninja" = true       ] && printf "$yf\n" || printf "$nf\n"
    printf "python:              "; [ "$found_python" = true      ] && printf "$yf\n" || printf "$nf\n"
    printf "cppcheck:            "; [ "$found_cppcheck" = true    ] && printf "$yf\n" || printf "$nf\n"
    printf "clang-tidy:          "; [ "$found_clangtidy" = true   ] && printf "$yf\n" || printf "$nf\n"
    printf "clang-format:        "; [ "$found_clangformat" = true ] && printf "$yf\n" || printf "$nf\n"

    printf "flasher:             ";
    if [ "$found_stflash" = true ]; then
        printf ""$TTY_FOUND""$TTY_BOLD"st-flash"$TTY_RESET"\n"
    elif [ "$found_stlink" = true ]; then
        printf ""$TTY_FOUND""$TTY_BOLD"st-link"$TTY_RESET"\n"
    else
        printf "$nf\n"
    fi
}

# Print a step message
step() {
    printf "\n"$TTY_STEP""$TTY_BOLD"$1"$TTY_RESET"\n"
    # Print - for every letter in the pre string
    for (( i=0; i<${#1}; i++ )); do printf -- "-"; done;
    printf "\n";
}

# Print an error message
error() {
    printf "\n"
    printf "$ERR: $1\n" >&2
}

# Print an error message without top padding
error_nopad() {
    printf "$ERR: $1\n" >&2
}

################################################################################
##############################      Internals     ##############################
################################################################################

# Find all the dependencies
find_deps() {
    command -v cmake               > /dev/null 2>&1 && found_cmake=true
    command -v arm-miosix-eabi-g++ > /dev/null 2>&1 && found_miosixgpp=true
    command -v ccache              > /dev/null 2>&1 && found_ccache=true
    command -v ninja               > /dev/null 2>&1 && found_ninja=true
    command -v python              > /dev/null 2>&1 && found_python=true
    command -v cppcheck            > /dev/null 2>&1 && found_cppcheck=true
    command -v clang-tidy          > /dev/null 2>&1 && found_clangtidy=true
    command -v clang-format        > /dev/null 2>&1 && found_clangformat=true
    command -v st-flash            > /dev/null 2>&1 && found_stflash=true
    command -v ST-LINK_CLI.exe     > /dev/null 2>&1 && found_stlink=true
}

# Initialize all the directories
init_dirs() {
    sbs_base="$(cd -- "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
    source_dir="$PWD"
    build_default_dir="$source_dir/$BUILD_DEFAULT_DIRNAME"
    build_host_dir="$source_dir/$BUILD_HOST_DIRNAME"
    toolchain_file="$sbs_base/libs/miosix-kernel/miosix/cmake/toolchain.cmake"
}

# workaround: disable tests in excluded subdirectories
# see: https://gitlab.kitware.com/cmake/cmake/-/issues/20212
cmake_disable_excluded_tests() {
    build_dir="$build_host_dir"

    [ ! -f "$build_dir/$CTEST_FILENAME" ] || sed -i.bak 's/^subdirs/# subdirs/' "$build_dir/$CTEST_FILENAME"
}

check_build_env() {
    [ "$found_cmake" = true ] || { error "CMake must be installed"; return $ENOPKG; }

    if [ "$config_host" = false ]; then
        [ "$found_miosixgpp" = true ] || { error "arm-miosix-eabi-g++ must be installed"; return $ENOPKG; }
    fi
}

# Check if the project is configured
# Ensure the following variables are properly set before calling this:
# config_build_dir, config_debug, config_verbose, config_host
check_configured() {
    to_reconfigure=false

    # Ensure config_build_dir is set. If you see this, fix the subcommand
    # by populating the variable before calling this function
    if [ -z "$config_build_dir" ]; then
        error "Build directory not set, this is an SBS bug"
        return $ENOENT
    fi

    if [ ! -d "$config_build_dir" ]; then
        to_reconfigure=true
        elif [ ! -f "$config_build_dir/$CMAKE_FILENAME" ]; then
        rm -rf "$config_build_dir"
        to_reconfigure=true
    else
        [ -f "$config_build_dir/$DEBUG_FILENAME" ]   && found_debug=true   || found_debug=false
        [ -f "$config_build_dir/$VERBOSE_FILENAME" ] && found_verbose=true || found_verbose=false
        if [ "$config_debug" != "$found_debug" ] \
        || [ "$config_verbose" != "$found_verbose" ]; then
            to_reconfigure=true
        fi
    fi

    if [ "$to_reconfigure" = true ]; then
        step "Configure"

        printf "Reconfiguring project with the following options:\n"
        printf "  - Debug:   %s\n" "$config_debug"
        printf "  - Verbose: %s\n" "$config_verbose"
        printf "  - Host:    %s\n" "$config_host"

        [ -f "$toolchain_file" ] || { error "CMake toolchain file for Miosix was not found"; return $ENOPKG1; }

        declare -a defs=(-DCMAKE_EXPORT_COMPILE_COMMANDS=ON)
        defs+=(-DCMAKE_C_FLAGS=-fdiagnostics-color=always -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always)
        [ "$config_host" = false ]   && defs+=(-DCMAKE_TOOLCHAIN_FILE="$toolchain_file" -DBUILD_TESTING=OFF)
        [ "$found_ccache" = true ]   && defs+=(-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache)
        [ "$config_debug" = true ]   && defs+=(-DCMAKE_BUILD_TYPE=Debug) || defs+=(-DCMAKE_BUILD_TYPE=Release)
        [ "$config_verbose" = true ] && defs+=(-DCMAKE_VERBOSE_MAKEFILE=ON)

        declare gen
        [ "$found_ninja" = true ] && gen=-GNinja || gen=-G"Unix Makefiles"

        cmake -B "$config_build_dir" "${defs[@]}" "$gen" "$source_dir" || return

        { [ "$config_debug" = true ]   && touch "$config_build_dir/$DEBUG_FILENAME";   } || rm -f "$config_build_dir/$DEBUG_FILENAME"
        { [ "$config_verbose" = true ] && touch "$config_build_dir/$VERBOSE_FILENAME"; } || rm -f "$config_build_dir/$VERBOSE_FILENAME"
    fi
}

lint_copyright() {
    step "Lint copyright"

    "$sbs_base/scripts/linter.py" --copyright "$source_dir/src"
}

lint_find() {
    step "Lint find"

    "$sbs_base/scripts/linter.py" --find "$source_dir/src"
}

lint_clangtidy() {
    build_dir="$1"

    step "Lint clang-tidy"

    config_debug=false
    config_verbose=false

    defs=(--extra-arg=-D_MIOSIX=1 --extra-arg=-D_MIOSIX_GCC_PATCH_MINOR=1 \
        --extra-arg=-D_MIOSIX_GCC_PATCH_MAJOR=3 --extra-arg=-D__LINT__)
    IFS=$'\n' read -rd '' -a incs < \
        <(arm-miosix-eabi-g++ -E -Wp,-v -xc++ /dev/null 2>&1 \
        | sed -n "s/^ /--extra-arg=-isystem/p")

    declare opts=()
    [ "$to_edit" = true ] && opts+=(--fix-notes --fix-errors)

    find "$source_dir/src" \
        -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \) \
        -exec clang-tidy --header-filter=".*" -p="$build_dir" "${defs[@]}" \
        "${incs[@]}" "${opts[@]}" {} \;
}

lint_cppcheck() {
    step "Lint cppcheck"

    echo "Running cppcheck..."

    cppcheck --language=c++ --std=c++14 --enable=all --inline-suppr \
        --suppress=unmatchedSuppression --suppress=unusedFunction \
        --suppress=missingInclude --error-exitcode=1 -q \
        -I$sbs_base/libs/socrate/include \
        "$source_dir/src"
}

lint_clangformat() {
    step "Lint clang-format"

    echo "Running clang-format..."

    opts=(--style=file --Werror --dry-run)

    # Find all the source files
    declare files=$(find "$source_dir/src" \
    -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \))

    # Count files and spread them evenly across cores: files / nproc + 1
    declare files_per_proc=$(
        echo "$files" | wc -l | \
        xargs -I {} bash -c "expr \( {} / $N_PROC \) + 1"
    )

    echo "$files" | xargs -n $files_per_proc -P 0 clang-format "${opts[@]}"
}

################################################################################
###############################   Subcommands  #################################
################################################################################

build() {
    # Parse build arguments
    for arg in "$@"; do
        case $arg in
            -d|--debug) config_debug=true ;;
            -v|--verbose) config_verbose=true ;;
            -j|--jobs=*) config_jobs="${arg#*=}" ;;
            -*) error "Unknown argument: $arg"; return $EINVAL ;;
            *) target="$arg" ;;
        esac
    done

    config_host=false
    config_build_dir="$build_default_dir"

    # Use the default "all" target if none was specified
    if [ -z "$target" ]; then
        if [ "$target_required" = true ]; then
            error "No target specified"
            return $ENOENT
        else
            target="all"
        fi
    fi

    check_build_env || return
    check_configured || return

    step "Build"
    cmake --build "$config_build_dir" --target "$target" -- -j"$config_jobs"
}

flash() {
    # Parse flash arguments
    unhandled_args=()
    for arg in "$@"; do
        case $arg in
            -r|--reset) config_reset=true ;;
            *) unhandled_args+=("$arg") ;;
        esac
    done
    set -- "${unhandled_args[@]}"

    # Require a target for flashing
    target_required=true
    build "$@" || return

    # Check if the target is flashable
    [ -f "$config_build_dir/$target.bin" ] || { error "Target '$target' is not flashable"; return $ENOEXEC; }

    # Flash the target
    step "Flash"

    declare -a flash_opts
    [ "$config_reset" = true ] && flash_opts+=("--connect-under-reset")

    if [ "$found_stflash" = true ]; then
        st-flash --reset "${flash_opts[@]}" write "$config_build_dir/$target.bin" 0x8000000
    elif [ "$found_stlink" = true ]; then
        ST-LINK_CLI.exe -P "$config_build_dir/$target.bin" 0x8000000 -V -Rst
    else
        error "No flashing software found"
        return $ENOPKG
    fi
}

run() {
    # Parse run arguments
    unhandled_args=()
    while [ $# -gt 0 ]; do
        case "$1" in
            -D|--device) shift; [ -n "$1" ] && device="$1" && shift ;;
            -D=*|--device=*) device="${1#*=}"; shift ;;
            -B|--baudrate) shift; [ -n "$1" ] && baudrate="$1" && shift ;;
            -B=*|--baudrate=*) baudrate="${1#*=}"; shift ;;
            *) unhandled_args+=("$1"); shift ;;
        esac
    done
    set -- "${unhandled_args[@]}"

    # Try some heuristics to select a serial device if not specified
    if [ -z "$device" ]; then
        device_patterns=(
            "/dev/ttyACM*"
            "/dev/ttyUSB*"
            "/dev/cu.usb*"
            "/dev/tty.usb*"
        )

        # Enable nullglob to ensure globs that don't match expand to nothing
        shopt -s nullglob

        for pattern in "${device_patterns[@]}"; do
            # Expand the current pattern into an array
            matching_devices=( $pattern )

            # Take the first matching device if any were found
            if (( ${#matching_devices[@]} > 0 )); then
                device="${matching_devices[0]}"
                break
            fi
        done

        # Disable nullglob
        shopt -u nullglob

        if [ -z "$device" ]; then
            error "No serial device specified and none could be autodetected"
            return $ENODEV
        fi
    fi

    # Set Skyward's default baudrate, if none was specified
    if [ -z "$baudrate" ]; then
        baudrate="115200"
    else
        # Ensure baudrate is a valid number
        if ! [[ "$baudrate" =~ ^[0-9]+$ ]]; then
            error "Invalid baudrate: $baudrate"
            return $EINVAL
        fi
    fi

    # Set port settings early to reduce connection delay after flashing
    # TTY devices use \r\n for newlines by default
    # Disable newlines on \r with `-icrnl` to avoid double newlines
    if [ "$OS" = "Linux" ]; then
        stty --file "$device" "$baudrate" -icrnl || return
    elif [ "$OS" = "Darwin" ]; then
        # macOS restores port settings to default when the port is closed
        # so we need to open it, set it up and then read from it
        exec 3<>$device
        stty -f "$device" "$baudrate" -icrnl || { exec 3<&-; return 1; }
    else
        error "Run command not supported on this OS: $OS"
        return $ENOTSUP
    fi

    # Flash the target
    flash "$@" || return

    step "Run - $device @ $baudrate"
    
    # OS specific behavior
    if [ "$OS" = "Linux" ]; then
        cat "$device"
    elif [ "$OS" = "Darwin" ]; then
        cat <&3
        # Close the fd
        exec 3<&-
    fi
}

clean() {
    # Parse build arguments
    for arg in "$@"; do
        case $arg in
            *) error "Unknown argument: $arg"; return $EINVAL ;;
        esac
    done

    step "Clean"

    echo "Cleaning build directories..."
    rm -rf "$build_default_dir"
    rm -rf "$build_host_dir"
    echo "Done."
}

test() {
    # Parse test arguments
    for arg in "$@"; do
        case $arg in
            -d|--debug) config_debug=true ;;
            -v|--verbose) config_verbose=true ;;
            -j|--jobs=*) config_jobs="${arg#*=}" ;;
            -*) error "Unknown argument: $arg"; return $EINVAL ;;
            *) target="$arg" ;;
        esac
    done

    config_host=true
    config_build_dir="$build_host_dir"

    # If target wasn't previously set, use the default one
    if [ -z "$target" ]; then
        target="catch-tests-boardcore"
    fi

    # Build the target
    check_build_env || return
    check_configured || return

    step "Build (Host)"
    cmake --build "$config_build_dir" --target "$target" -- -j"$config_jobs" || return

    # Run the tests
    step "Test"

    cmake_disable_excluded_tests
    ( cd "$config_build_dir" || return; ctest )
}

list() {
    config_debug=false
    config_verbose=false
    config_host=false
    config_build_dir="$build_default_dir"

    list_type="$1"

    if [ -z "$list_type" ]; then
        error_nopad "No list type specified"
        return $EINVAL
    fi

    check_build_env &> /dev/null || return
    check_configured &> /dev/null || return

    if [ "$list_type" = "targets" ]; then
        cmake --build "$config_build_dir" --target help \
            | grep -o '^[^/]*\.bin' | cut -f 1 -d '.'
    elif [ "$list_type" = "boards" ]; then
        cmake --build "$config_build_dir" --target help | awk -F '[-:]' '/^boardcore/ {print $2}'
    else
        error_nopad "Unknown list type: $list_type"
        return $EINVAL
    fi
}

lint() {
    # Parse lint arguments
    for arg in "$@"; do
        case $arg in
            *) error "Unknown argument: $arg"; return $EINVAL ;;
        esac
    done

    declare ret=0

    if [ "$found_python" = true ]; then
        lint_copyright
        [ $? -ne 0 ] && ret=-1
        lint_find
        [ $? -ne 0 ] && ret=-1
    else
        echo "Python not found, skipping copyright and find..."
    fi

    # Disable clang-tidy for now, as too many false positives
    # if [ "$found_clangtidy" = true ]; then
    #     lint_clangtidy "$build_default_dir"
    # else
    #     echo "Clang-tidy not found, skipping clang-tidy..."
    # fi

    if [ "$found_cppcheck" = true ]; then
        lint_cppcheck
        [ $? -ne 0 ] && ret=-1
    else
        echo "Cppcheck not found, skipping cppcheck..."
    fi

    if [ "$found_clangformat" = true ]; then
        lint_clangformat
        [ $? -ne 0 ] && ret=-1
    else
        echo "Clang-format not found, skipping clang-format..."
    fi

    return $ret
}

format() {
    # Parse format arguments
    for arg in "$@"; do
        case $arg in
            *) error "Unknown argument: $arg"; return $EINVAL ;;
        esac
    done

    if [ "$found_clangformat" = false ]; then
        error "clang-format must be installed"
        return $ENOPKG
    fi

    step "Format"

    echo "Running clang-format..."

    opts=(--style=file --Werror -i)

    # Find all the source files
    declare files=$(find "$source_dir/src" \
    -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.c" \))

    # Count files and spread them evenly across cores: files / nproc + 1
    declare files_per_proc=$(
        echo "$files" | wc -l | \
        xargs -I {} bash -c "expr \( {} / $N_PROC \) + 1"
    )

    echo "$files" | xargs -n $files_per_proc -P 0 clang-format "${opts[@]}"
}

help() {
    echo "Usage: sbs (command) <args> [options] "
    echo ""
    echo "Commands:"
    echo " build     - Build the specified target. If none is specified, all targets are built"
    echo "           -> <target=all> [-d | --debug] [-v | --verbose] [-j | --jobs=<jobs>]"
    echo " flash     - Build and flash the specified target"
    echo "           -> <target> [-d | --debug] [-v | --verbose] [-r | --reset] [-j | --jobs=<jobs>]"
    echo " run       - Build and flash the specified target and connect to serial device"
    echo "           -> <target> [-d | --debug] [-v | --verbose] [-r | --reset] [-j | --jobs=<jobs>]"
    echo "                       [-D | --device=<device>] [-B | --baudrate=<baudrate>]"
    echo " test      - Run the specified test. If none is specified, catch tests are run"
    echo "           -> <target> [-d | --debug] [-v | --verbose] [-j | --jobs=<jobs>]"
    echo " list      - List the available targets or boards"
    echo "           -> <targets | boards>"
    echo " clean     - Clean the build directory"
    echo " lint      - Lint the source code"
    echo " format    - Format the source code"
    echo " install   - Install autocomplete"
    echo " uninstall - Uninstall autocomplete"
    echo ""
    echo "Options:"
    echo " -d, --debug:    Build in debug mode"
    echo " -v, --verbose:  Print verbose output during build"
    echo " -r, --reset:    Force connect under reset when flashing"
    echo " -j, --jobs:     Number of jobs to run in parallel"
    echo " -D, --device:   Serial device to connect to (tries to autodetect if not specified)"
    echo " -B, --baudrate: Baudrate for the serial device (default: 115200)"
}

################################################################################
##############################   Python Commands  ##############################
################################################################################


install() {
    # Parse install arguments
    for arg in "$@"; do
        case $arg in
            *) error "Unknown argument: $arg"; return $EINVAL ;;
        esac
    done

    step "Install autocomplete"

    if [ "$found_python" = false ]; then
        error "Python is required to install autocomplete"
        return $ENOPKG
    fi

    echo "Retrieving targets..."

    targets=$(list "targets")
    declare ret=$?
    [ $ret -ne 0 ] && printf "$targets\n" && return $ret

    # Split the targets on newlines
    IFS=$'\n' read -rd '' -a targets <<< "$targets"

    echo "Found ${#targets[@]} targets"

    echo "Installing completion files..."
    sudo python "$sbs_base/scripts/autocomplete.py" "--install" "${targets[@]}"
}

uninstall() {
    # Parse uninstall arguments
    for arg in "$@"; do
        case $arg in
            *) error "Unknown argument: $arg"; return $EINVAL ;;
        esac
    done

    step "Uninstall autocomplete"

    if [ "$found_python" = false ]; then
        error "Python is required to uninstall autocomplete"
        return $ENOPKG
    fi

    echo "Uninstalling completion files..."
    sudo python "$sbs_base/scripts/autocomplete.py" "--uninstall"
}

################################################################################
##############################        Main        ##############################
################################################################################

# Exit immediately if no argument was provided
if [ "$#" -eq 0 ]; then
    help
    exit $EINVAL
fi

welcome() {
    printf "$banner"
    print_configuration
}

# Populate global variables for all commands
find_deps
init_dirs

case $1 in
    build)     welcome; shift; build "$@"; exit $? ;;
    clean)     welcome; shift; clean "$@"; exit $? ;;
    flash)     welcome; shift; flash "$@"; exit $? ;;
    run)       welcome; shift; run "$@"; exit $? ;;
    test)      welcome; shift; test "$@"; exit $? ;;
    lint)      welcome; shift; lint "$@"; exit $? ;;
    format)    welcome; shift; format "$@"; exit $? ;;
    install)   welcome; shift; install "$@"; exit $? ;;
    uninstall) welcome; shift; uninstall "$@"; exit $? ;;
    list)      shift; list "$@"; exit $? ;;
    help)      help; exit 0 ;;
    *)         error_nopad "'$1' is not a SBS command. See 'sbs help'." ; exit $EINVAL ;;
esac
